{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/mahir/Documents/GitHub/Energy%20Monitoring%20System/src/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nif (!process.env.MONGO_URI) {\n  throw new Error('Invalid/Missing environment variable: \"MONGO_URI\"');\n}\n\nconst uri = process.env.MONGO_URI;\nconst options = {};\n\nlet client;\nlet clientPromise;\n\nif (process.env.NODE_ENV === \"development\") {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  let globalWithMongo = global;\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(uri, options);\n    globalWithMongo._mongoClientPromise = client.connect();\n  }\n  clientPromise = globalWithMongo._mongoClientPromise;\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options);\n  clientPromise = client.connect();\n}\n\n// Export a module-scoped MongoClient promise. By doing this in a\n// separate module, the client can be shared across functions.\nexport default clientPromise;\n\nexport async function getDatabase() {\n  const client = await clientPromise;\n  return client.db(\"tuya\");\n}\n\nexport async function getCollection(collectionName = \"device_data\") {\n  const db = await getDatabase();\n  return db.collection(collectionName);\n}\n\nexport async function insertDeviceData(data) {\n  const collection = await getCollection();\n  return await collection.insertOne(data);\n}\n\nexport async function getTodayData(timezone = \"Asia/Dhaka\") {\n  const collection = await getCollection();\n\n  const todayStart = getTodayStartInTimezone(timezone);\n  const todayEnd = getTodayEndInTimezone(timezone);\n\n  console.log(`Today start (${timezone}): ${todayStart.toISOString()}`);\n  console.log(`Today end (${timezone}): ${todayEnd.toISOString()}`);\n\n  const pipeline = [\n    {\n      $match: {\n        timestamp: { $gte: todayStart, $lte: todayEnd },\n      },\n    },\n    {\n      $unwind: \"$status\",\n    },\n    {\n      $group: {\n        _id: {\n          hour: {\n            $hour: {\n              date: \"$timestamp\",\n              timezone: \"Asia/Dhaka\",\n            },\n          },\n          code: \"$status.code\",\n        },\n        value: { $avg: \"$status.value\" },\n      },\n    },\n    {\n      $group: {\n        _id: \"$_id.hour\",\n        data: {\n          $push: {\n            code: \"$_id.code\",\n            value: \"$value\",\n          },\n        },\n      },\n    },\n    {\n      $sort: { _id: 1 },\n    },\n  ];\n\n  return await collection.aggregate(pipeline).toArray();\n}\n\nexport async function getTodayConsumption(timezone = \"Asia/Dhaka\") {\n  const collection = await getCollection();\n\n  const todayStart = getTodayStartInTimezone(timezone);\n  const now = new Date();\n\n  const pipeline = [\n    {\n      $match: {\n        timestamp: { $gte: todayStart, $lte: now },\n        \"status.code\": \"switch_1\",\n        \"status.value\": true,\n      },\n    },\n    {\n      $sort: { timestamp: 1 },\n    },\n    {\n      $group: {\n        _id: null,\n        totalKwh: {\n          $sum: {\n            $multiply: [\n              {\n                $divide: [\n                  {\n                    $subtract: [\n                      {\n                        $ifNull: [\n                          {\n                            $arrayElemAt: [\n                              {\n                                $filter: {\n                                  input: {\n                                    $arrayElemAt: [\n                                      {\n                                        $slice: [\n                                          \"$status\",\n                                          {\n                                            $add: [\n                                              {\n                                                $indexOfArray: [\n                                                  \"$status.code\",\n                                                  \"switch_1\",\n                                                ],\n                                              },\n                                              1,\n                                            ],\n                                          },\n                                        ],\n                                      },\n                                      0,\n                                    ],\n                                  },\n                                  cond: { $eq: [\"$$this.code\", \"cur_power\"] },\n                                },\n                              },\n                              0,\n                            ],\n                          },\n                          { value: 0 },\n                        ],\n                      }.value,\n                      0,\n                    ],\n                  },\n                  1000,\n                ],\n              },\n              {\n                $divide: [\n                  {\n                    $subtract: [\n                      {\n                        $ifNull: [\n                          {\n                            $arrayElemAt: [\n                              {\n                                $slice: [\n                                  \"$timestamp\",\n                                  {\n                                    $add: [\n                                      {\n                                        $indexOfArray: [\n                                          \"$status.code\",\n                                          \"switch_1\",\n                                        ],\n                                      },\n                                      1,\n                                    ],\n                                  },\n                                ],\n                              },\n                              0,\n                            ],\n                          },\n                          { $arrayElemAt: [\"$timestamp\", 0] },\n                        ],\n                      },\n                      3600000,\n                    ],\n                  },\n                  1,\n                ],\n              },\n            ],\n          },\n        },\n        dataPoints: { $sum: 1 },\n      },\n    },\n  ];\n\n  const result = await collection.aggregate(pipeline).toArray();\n\n  if (result.length === 0) {\n    return {\n      kwh: 0,\n      cost: 0,\n      dataPoints: 0,\n      message: \"No AC ON data found for today\",\n    };\n  }\n\n  const consumption = result[0];\n  const totalKwh = consumption.totalKwh;\n  const cost = totalKwh * 10; // 10 Taka per unit\n\n  return {\n    kwh: parseFloat(totalKwh.toFixed(4)),\n    cost: parseFloat(cost.toFixed(2)),\n    dataPoints: consumption.dataPoints,\n    timeRange: {\n      start: todayStart.toISOString(),\n      end: now.toISOString(),\n      timezone: timezone,\n    },\n    rate: 10,\n    calculationMethod: \"Only AC ON Intervals (Riemann Sum)\",\n  };\n}\n\nfunction getTodayStartInTimezone(timezone) {\n  const now = new Date();\n  if (timezone === \"Asia/Dhaka\") {\n    const dhakaDate = new Date(now.getTime() + 6 * 60 * 60 * 1000);\n    dhakaDate.setUTCHours(0, 0, 0, 0);\n    const utcStart = new Date(dhakaDate.getTime() - 6 * 60 * 60 * 1000);\n    return utcStart;\n  }\n  const localDate = new Date(now);\n  localDate.setHours(0, 0, 0, 0);\n  return localDate;\n}\n\nfunction getTodayEndInTimezone(timezone) {\n  const now = new Date();\n  if (timezone === \"Asia/Dhaka\") {\n    const dhakaDate = new Date(now.getTime() + 6 * 60 * 60 * 1000);\n    dhakaDate.setUTCHours(23, 59, 59, 999);\n    const utcEnd = new Date(dhakaDate.getTime() - 6 * 60 * 60 * 1000);\n    return utcEnd;\n  }\n  const localDate = new Date(now);\n  localDate.setHours(23, 59, 59, 999);\n  return localDate;\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///home/mahir/Documents/GitHub/Energy%20Monitoring%20System/src/app/api/today-data/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { getTodayData } from \"@/lib/mongodb\";\n\nexport async function GET(request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const timezone = searchParams.get(\"timezone\") || \"Asia/Dhaka\";\n\n    const data = await getTodayData(timezone);\n\n    return NextResponse.json({\n      success: true,\n      data: data,\n    });\n  } catch (error) {\n    console.error(\"Error fetching today's data:\", error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to fetch today's data\",\n        details: error.message,\n      },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAO;IAC/B,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,WAAW,aAAa,GAAG,CAAC,eAAe;QAEjD,MAAM,OAAO,MAAM,CAAA,GAAA,uHAAA,CAAA,eAAY,AAAD,EAAE;QAEhC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,MAAM,OAAO;QACxB,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}